package templates

import "solana-wallet-checker/models"
import "fmt"

templ Balance(walletBalance *models.WalletBalance) {
	@Layout("Wallet Balance") {
		<div class="max-w-4xl mx-auto">
			<!-- Back Button -->
			<div class="mb-4">
				<a href="/" class="inline-flex items-center text-purple-600 hover:text-purple-800">
					<i class="fas fa-arrow-left mr-2"></i>
					Back to Home
				</a>
			</div>
			<!-- Wallet Info -->
			<div class="bg-white rounded-lg shadow-md p-6 mb-6">
				<div class="flex items-center justify-between mb-4">
					<h1 class="text-2xl font-bold text-gray-800">
						<i class="fas fa-wallet mr-2"></i>
						Wallet Balance
					</h1>
					<div class="text-right">
						<p class="text-sm text-gray-600">Total Value</p>
						<p class="text-2xl font-bold text-green-600">
							${ fmt.Sprintf("%.2f", walletBalance.TotalUSDValue) }
						</p>
					</div>
				</div>
				<div class="bg-gray-50 rounded-md p-3 mb-4">
					<p class="text-xs text-gray-600">Wallet Address</p>
					<p class="font-mono text-sm break-all">{ walletBalance.WalletAddress }</p>
				</div>
				<!-- SOL Balance -->
				<div class="border-l-4 border-purple-500 pl-4">
					<div class="flex justify-between items-center">
						<div>
							<h3 class="font-semibold text-lg">Solana (SOL)</h3>
							<p class="text-gray-600">{ fmt.Sprintf("%.4f", walletBalance.SOLBalance) } SOL</p>
						</div>
						<div class="text-right">
							<p class="text-lg font-semibold text-green-600">
								${ fmt.Sprintf("%.2f", walletBalance.SOLUSDBalance) }
							</p>
						</div>
					</div>
				</div>
			</div>
			<!-- Token Balances -->
			<div class="bg-white rounded-lg shadow-md p-6">
				<h2 class="text-xl font-bold text-gray-800 mb-4">
					<i class="fas fa-coins mr-2"></i>
					Bluechip Assets ({ fmt.Sprintf("%d", len(walletBalance.Tokens)) })
				</h2>
				if len(walletBalance.Tokens) == 0 {
					<div class="text-center py-8 text-gray-500">
						<i class="fas fa-inbox text-4xl mb-4"></i>
						<p>No bluechip assets found in this wallet</p>
						<p class="text-sm mt-2">Supported: SOL, ETH, USDC, USDT, WBTC, cbBTC</p>
					</div>
				} else {
					<div class="space-y-4">
						for _, token := range walletBalance.Tokens {
							<div class="flex items-center justify-between p-4 border rounded-lg hover:bg-gray-50">
								<div class="flex items-center space-x-4">
									<div class="w-10 h-10 rounded-full flex items-center justify-center overflow-hidden bg-gray-100">
										if token.LogoURI != "" {
											<img src={ token.LogoURI } alt={ token.TokenSymbol } class="w-10 h-10 rounded-full object-cover"/>
										} else {
											<div class="w-10 h-10 bg-gradient-to-br from-purple-400 to-pink-400 rounded-full flex items-center justify-center">
												<span class="text-white font-bold text-sm">{ token.TokenSymbol[:1] }</span>
											</div>
										}
									</div>
									<div>
										<h3 class="font-semibold text-lg">{ token.TokenName }</h3>
										<p class="text-sm text-gray-600 font-medium">{ token.TokenSymbol }</p>
										<p class="text-xs text-gray-500 font-mono">{ token.TokenAddress[:16] }...</p>
									</div>
								</div>
								<div class="text-right">
									<p class="font-semibold text-lg">{ fmt.Sprintf("%.6f", token.Balance) } { token.TokenSymbol }</p>
									if token.USDBalance > 0 {
										<p class="text-lg font-bold text-green-600">${ fmt.Sprintf("%.2f", token.USDBalance) }</p>
									} else {
										<p class="text-sm text-gray-500">Price unavailable</p>
									}
								</div>
							</div>
						}
					</div>
				}
			</div>
		</div>
	}
}
